<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.winemanager.user.mapper.UserMapper">

	<select id="selectUserById" parameterType="com.winemanager.user.domain.User" resultType="com.winemanager.user.domain.User">
		select
			user_id, password, nickname, email, profile_pic
		from
			wine.member
		where
			user_id = #{userId}
		
	</select>
    
    <insert id="insertUser" parameterType="com.winemanager.user.domain.User">
    	insert into
    		wine.member
    	(user_id, password, nickname, email)
    	values
    	(#{userId}, #{password}, #{nickname}, #{email})
    </insert>
    
    <select id="selectMainStats" parameterType="String">
    	select
			IFNULL((select sum(count) from wine.wine_log where type = "IN" and user_id = wl.user_id), 0) number_of_buying
		    , IFNULL((select sum(count) from wine.wine_log where type = "OUT" and user_id = wl.user_id), 0) number_of_drinking
		    , IFNULL((select sum(price * count) from wine.wine_log where type = "IN" and user_id = wl.user_id), 0) money_spent
		from
			wine_log wl
		where
			wl.user_id = #{userId}
		group by
			wl.user_id
    </select>
    
    <select id="selectTimeline" parameterType="com.winemanager.user.domain.TimelineRequest" resultType="com.winemanager.user.domain.Timeline">
    	select
			w.wine_id, l.log_id, l.date, l.type, w.name wine_name, w.vintage, w.size wine_size, l.count, l.price, l.place, r.rating rate, w.thumb, w.thumb_bottom,
			(select sum(price * count) from wine.wine_log where date = l.date and type = "IN") spend_today,
    		(select sum(count) from wine.wine_log where date = l.date and type = "OUT") drink_today
		from
			wine.wine w
		left join
			wine.wine_log l
		on
			l.wine_id = w.wine_id
		left join
			wine.review r
		on
			r.log_id = l.log_id
		where
			w.user_id = #{userId}
		order by
			l.date desc, l.type, w.name desc, l.log_id desc
		limit
			${(page - 1) * pageSize}, ${pageSize + 1}
    </select>
    
    <select id="selectSpendByMonth" parameterType="com.winemanager.user.domain.stats.StatsRequest" resultType="com.winemanager.user.domain.stats.SpendByTime">
    	select D.DATE month, IFNULL(L.money, 0) money
		from (
			SELECT DATE_FORMAT(DD.Date, '%Y-%m') AS DATE
			FROM (
				SELECT curdate() - INTERVAL (a.a + (10 * b.a) + (100 * c.a) + (1000 * d.a) ) DAY AS Date
				from (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as a
					cross join (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as b
					cross join (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as c
					cross join (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as d
			) DD
			<where> 
				<if test="year == null">
				DATE_FORMAT(DD.DATE, '%Y-%m') between DATE_FORMAT(ADDDATE(now(),  INTERVAL -1 YEAR), '%Y-%m') AND DATE_FORMAT(now(), '%Y-%m')
				</if>
				<if test="year > 0">
				DATE_FORMAT(DD.DATE, '%Y-%m') between CONCAT(#{year}, '-01') and CONCAT(#{year}, '-12')
				</if>
				<if test="year == 0">
				DD.date >= (select min(date) from wine.wine_log where user_id = #{userId} and type = 'IN')
				</if>
				<if test="year lt 0">
				DATE_FORMAT(DD.DATE, '%Y-%m') between DATE_FORMAT(ADDDATE(now(),  INTERVAL -${year * -1} YEAR), '%Y-%m') AND DATE_FORMAT(now(), '%Y-%m')
				</if>
			</where>
			GROUP BY DATE_FORMAT(DD.Date, '%Y-%m')
		) D
		left join (
			select DATE_FORMAT(Date, '%Y-%m') month, sum(price * count) money 
		    from wine.wine_log 
		    where user_id = #{userId} and type = 'IN' group by month) L
		on
			L.month = D.date
		order by
			month asc
    </select>
    
    <select id="selectStockByDate" parameterType="com.winemanager.user.domain.stats.StatsRequest" resultType="com.winemanager.user.domain.stats.StockByTime">
    	WITH recursive Date_Ranges AS (
		    select 
		    	LEAST(
		    	<if test="year == null">
		    	DATE_FORMAT(ADDDATE(now(),  INTERVAL -1 YEAR), '%Y-%m-%d')
				</if>
				<if test="year > 0">
				DATE_FORMAT(CONCAT(#{year}, '-01-01'), '%Y-%m-%d')
				</if>
				<if test="year == 0">
				(select DATE_FORMAT(min(date), '%Y-%m-%d') from wine.wine_log where user_id = #{userId})
				</if>
				<if test="year lt 0">
				DATE_FORMAT(ADDDATE(now(),  INTERVAL -${year * -1} YEAR), '%Y-%m-%d')
				</if>
				
				, (select DATE_FORMAT(min(date), '%Y-%m-%d') from wine.wine_log where user_id = #{userId})
				)
				
		    as date
		    union all
		    select Date + interval 1 day
		    from Date_Ranges
		    where Date <![CDATA[<]]> 
		    <if test="year == null">
			DATE_FORMAT(now(), '%Y-%m-%d')
			</if>
			<if test="year > 0">
			DATE_FORMAT(CONCAT(#{year}, '-12-31'), '%Y-%m-%d')
			and
			Date <![CDATA[<]]> DATE_FORMAT(now(), '%Y-%m-%d')
			</if>
			<if test="year == 0">
			DATE_FORMAT(now(), '%Y-%m-%d')
			</if>
			<if test="year lt 0">
			DATE_FORMAT(now(), '%Y-%m-%d')
			</if>
		)
		select C.date, C.count, C.count_in, C.count_out, C.stock
		from (
			select B.date, B.count, B.count_in, B.count_out, sum(B.count) over(order by B.date) stock
			from (
				select A.date, sum(A.count_in + IFNULL(LO.count, 0) * (-1)) count, A.count_in, sum(IFNULL(LO.count, 0)) count_out
				from (
					select D.date, sum(IFNULL(LI.count, 0)) count_in
					from Date_Ranges D
					left join (select DATE_FORMAT(date, '%Y-%m-%d') date, count, type from wine.wine_log where user_id = #{userId} and type = 'IN') LI
					on D.date = LI.date
					group by D.date
				) A
				left join (select DATE_FORMAT(date, '%Y-%m-%d') date, count, type from wine.wine_log where user_id = #{userId} and type = 'OUT') LO
				on A.date = LO.date
				group by A.date
			) B
		)C
		where
			C.date <![CDATA[>=]]>
			<if test="year == null">
	    	DATE_FORMAT(ADDDATE(now(),  INTERVAL -1 YEAR), '%Y-%m-%d')
			</if>
			<if test="year > 0">
			DATE_FORMAT(CONCAT(#{year}, '-01-01'), '%Y-%m-%d')
			</if>
			<if test="year == 0">
			(select DATE_FORMAT(min(date), '%Y-%m-%d') from wine.wine_log where user_id = #{userId})
			</if>
			<if test="year lt 0">
			DATE_FORMAT(ADDDATE(now(),  INTERVAL -${year * -1} YEAR), '%Y-%m-%d')
			</if>
    </select>
    
    <select id="selectWineByPlace" parameterType="com.winemanager.user.domain.stats.StatsRequest" resultType="com.winemanager.user.domain.stats.WineByPlace">
    	select A.place, A.count
		from (
			select place, IFNULL(sum(count), 0) count
			from wine.wine_log
			where user_id = #{userId} and type = 'IN'
			group by place
			order by count desc
			limit 10
		) A
		
		union all
		
		select 'others' as place, IFNULL(sum(B.count), 0) count
		from (
			select ROW_NUMBER() OVER() row_num, A.place, A.count
			from(
				select place, IFNULL(sum(count), 0) count
				from wine.wine_log
				where user_id = #{userId} and type = 'IN'
				group by place
				order by count desc
			) A
		) B
		where B.row_num > 10;
    </select>
    
    <select id="selectWineByType" parameterType="com.winemanager.user.domain.stats.StatsRequest" resultType="com.winemanager.user.domain.stats.WineByType">
    	<choose>
    		<when test="wineDataType == 'hold' || wineDataType == null">
    			select wine_type type, sum(count) count
				from wine.wine
				where user_id = #{userId}
				group by wine_type
				order by count desc
    		</when>
    		<otherwise>
    			select W.wine_type type, sum(WL.count) count
				from wine.wine W
				left join wine.wine_log WL
				on W.wine_id = WL.wine_id 
					and WL.type = 
					<if test="wineDataType == 'buy'">'IN'</if>
					<if test="wineDataType == 'drink'">'OUT'</if>
				where W.user_id = #{userId}
				group by W.wine_type
				order by count desc
    		</otherwise>
    	</choose>
    </select>
    
    <select id="selectWineByCountry" parameterType="com.winemanager.user.domain.stats.StatsRequest" resultType="com.winemanager.user.domain.stats.WineByCountry">
    	select A.country, A.count
		from(
			select 
				<if test='wineDataType == null or wineDataType.startsWith("country")'>
				W.country country, 				
				</if>
				<if test='wineDataType != null and wineDataType.startsWith("region")'>
				W.region country, 				
				</if>
				<if test='wineDataType == null or wineDataType.endsWith("hold")'>
				IFNULL(sum(W.count), 0) count
				</if>
				<if test='wineDataType != null and (wineDataType.endsWith("buy") or wineDataType.endsWith("drink"))'>
				IFNULL(sum(WL.count), 0) count
				</if>
			from wine.wine W
			<if test='wineDataType != null and (wineDataType.endsWith("buy") or wineDataType.endsWith("drink"))'>
			left join wine.wine_log WL
			on WL.wine_id = W.wine_id 
				<if test='wineDataType.endsWith("buy")'>
				and WL.type = 'IN'
				</if>
				<if test='wineDataType.endsWith("drink")'>
				and WL.type = 'OUT'
				</if>
			</if>
			where W.user_id = #{userId}
			group by 
			<if test='wineDataType == null or wineDataType.startsWith("country")'>
			W.country
			</if>
			<if test='wineDataType != null and wineDataType.startsWith("region")'>
			W.region
			</if>
			order by count desc
			limit 10
		) A
		
		union all
		
		select 'others' as country, IFNULL(sum(B.count), 0) count
		from (
			select ROW_NUMBER() OVER() row_num, A.country, A.count
			from(
				select 
					<if test='wineDataType == null or wineDataType.startsWith("country")'>
					W.country country, 				
					</if>
					<if test='wineDataType != null and wineDataType.startsWith("region")'>
					W.region country, 				
					</if>
					<if test='wineDataType == null or wineDataType.endsWith("hold")'>
					IFNULL(sum(W.count), 0) count
					</if>
					<if test='wineDataType != null and (wineDataType.endsWith("buy") or wineDataType.endsWith("drink"))'>
					IFNULL(sum(WL.count), 0) count
					</if>
				from wine.wine W
				<if test='wineDataType != null and (wineDataType.endsWith("buy") or wineDataType.endsWith("drink"))'>
				left join wine.wine_log WL
				on WL.wine_id = W.wine_id 
					<if test='wineDataType.endsWith("buy")'>
					and WL.type = 'IN'
					</if>
					<if test='wineDataType.endsWith("drink")'>
					and WL.type = 'OUT'
					</if>
				</if>
				where W.user_id = #{userId}
				group by 
				<if test='wineDataType == null or wineDataType.startsWith("country")'>
				W.country
				</if>
				<if test='wineDataType != null and wineDataType.startsWith("region")'>
				W.region
				</if>
				order by count desc
			) A
		) B
		where B.row_num > 10
    </select>

	<select id="selectWineByPrice" parameterType="com.winemanager.user.domain.stats.StatsRequest" resultType="com.winemanager.user.domain.stats.WineByPrice">
		select 
			IFNULL(SUM(case when (WL.price / ER.USD) <![CDATA[>=]]> 0 and (WL.price / ER.USD) <![CDATA[<]]> 10 then WL.count end), 0) 'range0To10'
		    , IFNULL(SUM(case when (WL.price / ER.USD) <![CDATA[>=]]> 10 and (WL.price / ER.USD) <![CDATA[<]]> 50 then WL.count end), 0) 'range10To50'
		    , IFNULL(SUM(case when (WL.price / ER.USD) <![CDATA[>=]]> 50 and (WL.price / ER.USD) <![CDATA[<]]> 100 then WL.count end), 0) 'range50To100'
		    , IFNULL(SUM(case when (WL.price / ER.USD) <![CDATA[>=]]> 100 and (WL.price / ER.USD) <![CDATA[<]]> 500 then WL.count end), 0) 'range100To500'
		    , IFNULL(SUM(case when (WL.price / ER.USD) <![CDATA[>=]]> 500 and (WL.price / ER.USD) <![CDATA[<]]> 1000 then WL.count end), 0) 'range500To1000'
		    , IFNULL(SUM(case when (WL.price / ER.USD) <![CDATA[>=]]> 1000 then WL.count end), 0) 'rangeFrom1000'
		from wine.wine_log WL
		left join wine.exchange_rate ER
		on 1=1
		where WL.user_id = #{userId} and WL.type = 'IN'
	</select>
	
	<select id="selectBestWine" parameterType="String" resultType="com.winemanager.user.domain.stats.Top3Stats">
		select CONCAT(W.name, IFNULL(CONCAT(' - ', W.vintage), ''), (CASE WHEN W.size != 'Standard' THEN CONCAT(' [', W.size, ']') ELSE '' END)) name, MAX(R.rating) value
		from wine.wine W
		inner join wine.wine_log WL
		on WL.wine_id = W.wine_id
		inner join wine.review R
		on R.log_id = WL.log_id
		where W.user_id = #{userId}
		group by W.name, W.average_price, W.vintage, W.size
		order by value desc, W.average_price desc
		limit 3
	</select>
	<select id="selectCostEffectiveWine" parameterType="String" resultType="com.winemanager.user.domain.stats.Top3Stats">
		select W.name name, (W.average_rating / W.average_price) value
		from wine.wine W
		left join (select AVG(average_rating) avg_rating from wine.wine where user_id = 'jsw4795') AR
		on 1=1 
		where W.user_id = #{userId} and W.average_rating > AR.avg_rating
		order by value desc, W.average_price asc
		limit 3
	</select>
	<select id="selectMostConsumedWine" parameterType="String" resultType="com.winemanager.user.domain.stats.Top3Stats">
		select W.name name, SUM(WL.count) value
		from wine.wine W
		inner join wine.wine_log WL
		on WL.wine_id = W.wine_id and WL.type = 'OUT'
		where W.user_id = #{userId}
		group by W.name, W.average_price
		order by value desc, W.average_price desc
		limit 3
	</select>
	<select id="selectMostExpensiveWine" parameterType="String" resultType="com.winemanager.user.domain.stats.Top3Stats">
		select CONCAT(W.name, IFNULL(CONCAT(' - ', W.vintage), ''), (CASE WHEN W.size != 'Standard' THEN CONCAT(' [', W.size, ']') ELSE '' END)) name
			, (MAX(WL.price) / ER.USD) value
		from wine.wine W
		inner join wine.wine_log WL
		on WL.wine_id = W.wine_id and WL.type = 'IN'
		left join wine.exchange_rate ER
		on 1=1 
		where W.user_id = #{userId}
		group by W.name, W.vintage, W.size, ER.USD
		order by value desc
		limit 3
	</select>

</mapper>
