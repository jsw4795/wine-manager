<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.winemanager.wine.mapper.WineMapper">
    
    <select id="selectPlaceById" parameterType="String" resultType="String">
    	select
			place
		from
			wine.place
		where
			user_id = #{userId}
    </select>
    
    <insert id="insertPlace" parameterType="Map">
    	insert into
    		wine.place
		(user_id, place)
		values
		(#{userId}, #{place})
    </insert>
    
    <insert id="insertNewWine" parameterType="com.winemanager.wine.domain.Wine" useGeneratedKeys="true" keyColumn="wine_id" keyProperty="wineId">
    	insert into
			wine.wine
		(user_id, name, link, thumb, thumb_bottom, country, region, average_rating, rating, average_price, vintage, count, size, wine_type)
		values
		(#{userId}, #{name}, #{link}, #{thumb}, #{thumbBottom}, #{country}, #{region}, #{averageRating}, #{rating}, #{averagePrice}, #{vintage}, #{count}, #{size}, #{wineType})
    </insert>
    
    <insert id="insertWineLog" parameterType="com.winemanager.wine.domain.WineLog" useGeneratedKeys="true" keyColumn="log_id" keyProperty="logId">
    	insert into
			wine.wine_log
		(user_id, wine_id, type, date, place, price, count)
		values
		(#{userId}, #{wineId}, #{type}, #{date}, #{place}, #{price}, #{count})
    </insert>
    
    <select id="selectWineListByName" parameterType="Map" resultType="com.winemanager.wine.domain.Wine">
    	select
    		wine_id, user_id, name, link, thumb, thumb_bottom, country, region, average_rating, rating, average_price, vintage, count, size, wine_type
    	from
    		wine.wine
    	where
    		user_id = #{userId}
    		and
    		name like concat('%', #{keyword}, '%')
    </select>
    
    <select id="selectCountOfMyWine" parameterType="com.winemanager.wine.domain.MyWineRequest" resultType="int">
    	select
    		count(*)
    	from
    		wine.wine
    	<where>
    		user_id = #{userId}
    		<if test="type != 'all'">
    			and wine_type = #{type}
    		</if>
    		<if test="hideSoldOut == true">
    			and count > 0
    		</if>
    	</where>
    </select>
    
    <select id="selectMyWine" parameterType="com.winemanager.wine.domain.MyWineRequest" resultType="com.winemanager.wine.domain.Wine">
    	select
    		W.wine_id, W.user_id, W.name, W.link, W.thumb, W.thumb_bottom, W.country, W.region, W.rating, W.average_rating, W.vintage, W.count, W.size, W.wine_type
			, avg(L.price) / (select USD from wine.exchange_rate) average_price
    	from
    		wine.wine W
		left join
			wine.wine_log L
		on
			L.wine_id = W.wine_id
    	<where>
    		W.user_id = #{userId}
    		<if test="type != 'all'">
    			and W.wine_type = #{type}
    		</if>
    		<if test="hideSoldOut == true">
    			and W.count > 0
    		</if>
    	</where>
    	group by
			W.wine_id
    	order by
	    	<if test="sortBy != null">
		    	<if test="sortBy.equals('reg_asc')">W.wine_id asc,</if>
		    	<if test="sortBy.equals('name_asc')">W.name asc,</if>
		    	<if test="sortBy.equals('name_desc')">W.name desc,</if>
		    	<if test="sortBy.equals('price_asc')">average_price asc,</if>
		    	<if test="sortBy.equals('price_desc')">average_price desc,</if>
		    	<if test="sortBy.equals('count_asc')">W.count asc,</if>
		    	<if test="sortBy.equals('count_desc')">W.count desc,</if>
	    	</if>
    		W.wine_id desc
    	limit
    		#{pagination.limitStart}, #{recordSize}
    </select>
    
    <resultMap id="wineDetail" type="com.winemanager.wine.domain.WineDetailResponse" >
    	<result property="userAveragePrice" column="user_average_price"/>
    	<result property="userAverageRating" column="user_average_rating"/>
    	<result property="numberOfBuying" column="number_of_buying"/>
    	<result property="numberOfDrinking" column="number_of_drinking"/>
    	<association property="wine" javaType="com.winemanager.wine.domain.Wine">
    		<id property="userId" column="user_id"/>
    		<id property="wineId" column="wine_id"/>
    		<result property="wineType" column="wine_type"/>
    		<result property="name" column="name"/>
    		<result property="size" column="size"/>
    		<result property="vintage" column="vintage"/>
    		<result property="country" column="country"/>
    		<result property="region" column="region"/>
    		<result property="averageRating" column="average_rating"/>
    		<result property="rating" column="rating"/>
    		<result property="averagePrice" column="average_price"/>
    		<result property="count" column="count"/>
    		<result property="link" column="link"/>
    		<result property="thumb" column="thumb"/>
    		<result property="thumbBottom" column="thumb_bottom"/>
    		<result property="bestYear" column="best_year"/>
    	</association>
    	<collection property="wineLogList" column="wineId = wine_id" ofType="com.winemanager.wine.domain.WindLog" select="selectWineLogListByWineId"/>
    	<collection property="reviewList" column="wineId = wine_id" ofType="com.winemanager.wine.domain.Review" select="selectReviewListByWineId"/>
    </resultMap>
    
    <select id="selectWineDetail" parameterType="com.winemanager.wine.domain.Wine" resultMap="wineDetail">
    	select
			W.wine_id, W.user_id, W.name, W.link, W.thumb, W.thumb_bottom, W.country, W.region, W.average_rating, W.rating, W.average_price, W.vintage, W.count, W.size, W.wine_type
			, (select sum(price * count) / SUM(count) from wine.wine_log where wine_id = W.wine_id and user_id = W.user_id and type = 'IN') user_average_price
			, (select sum(rating) / count(rating) from wine.review where log_id in (select log_id from wine.wine_log where wine_id = W.wine_id and user_id = W.user_id)) user_average_rating
			, (select sum(count) from wine.wine_log where wine_id = W.wine_id and user_id = W.user_id and type = 'IN') number_of_buying
			, (select sum(count) from wine.wine_log where wine_id = W.wine_id and user_id = W.user_id and type = 'OUT') number_of_drinking
		from
			wine.wine W
		where
			W.user_id = #{userId}
			and
			W.wine_id = #{wineId}
    </select>
    
    <select id="selectWineLogListByWineId" resultType="com.winemanager.wine.domain.WineLog">
    	select
    		log_id, user_id, wine_id, type, date, place, price, count
    	from
    		wine.wine_log
    	where
			wine_id = #{wineId}
		order by
			date desc, type desc
		limit
			0, 5
    </select>
    
    <select id="selectReviewListByWineId" resultType="com.winemanager.wine.domain.Review">
    	select
    		R.review_id, R.log_id, R.user_id, R.rating, R.title, R.photo, R.content, L.date reg_date, L.place
    	from
    		wine.review R
    	inner join
    		wine.wine_log L
    	on
    		R.log_id = L.log_id
    	where
    		L.wine_id = #{wineId}
    	order by
    		L.date desc
    	limit
    		0, 5
    </select>
    
    <select id="selectUserIdByWineId" parameterType="int" resultType="String">
    	select
    		user_id
    	from
    		wine.wine
    	where
    		wine_id = #{wineId}
    </select>
    
    <select id="selectWineById" parameterType="int" resultType="com.winemanager.wine.domain.Wine">
    	select
    		wine_id, user_id, name, link, thumb, thumb_bottom, country, region, average_rating, rating, average_price, vintage, count, size, wine_type
    	from
    		wine.wine
    	where
    		wine_id = #{wineId}
    </select>
    
    <insert id="insertReview" parameterType="com.winemanager.wine.domain.Review" useGeneratedKeys="true">
    	insert into
			wine.review
		(log_id, user_id, rating, title, content, photo)
		values
		(#{logId}, #{userId}, #{rating}, #{title}, #{content}, #{photo});
		
    </insert>
    
    <update id="updateExchangeRate" parameterType="double">
    	update
    		wine.exchange_rate
    	set
    		usd = #{usd}
    </update>
    
    <update id="updateWine" parameterType="com.winemanager.wine.domain.Wine" >
    	update
    		wine.wine
		set 
			name = #{name}, link = #{link}, thumb = #{thumb}, thumb_bottom = #{thumbBottom}, country = #{country}, region = #{region}, average_rating = #{averageRating}, rating = #{rating}, average_price = #{averagePrice}, vintage = #{vintage}, size = #{size}, wine_type = #{wineType}
		where
			wine_id = #{wineId} and user_id = #{userId}
    </update>
    
    <select id="selectWineLog" parameterType="com.winemanager.wine.domain.WineLog" resultType="com.winemanager.wine.domain.WineLog">
    	select 
    		log_id, wine_id, user_id, wine_id, type, date, place, price, count
    	from
    		wine.wine_log
    	where
    		log_id = #{logId}
    		and
    		user_id = #{userId}
    </select>
    
    <update id="updateWineLog" parameterType="com.winemanager.wine.domain.WineLog">
    	update
    		wine.wine_log
    	set
    		date = #{date}, place = #{place}, price = #{price}, count = #{count}
    	where
    		log_id = #{logId}
    		and 
    		user_id = #{userId}
    </update>
    
    <select id="selectWineLogWithPagination" parameterType="com.winemanager.wine.domain.WineDetailRequest" resultType="com.winemanager.wine.domain.WineLog">
    	select
    		log_id, user_id, wine_id, type, date, place, price, count
    	from
    		wine.wine_log
    	where
			wine_id = #{wineId}
			and 
			user_id = #{userId}
		order by
			date desc, type desc
		limit
			${(page - 1) * 5}, #{pageSize}
    </select>
    
    <select id="selectWineReviewWithPagination" parameterType="com.winemanager.wine.domain.WineDetailRequest" resultType="com.winemanager.wine.domain.Review">
    	select
    		R.review_id, R.log_id, R.user_id, R.rating, R.title, R.photo, R.content, L.date reg_date, L.place
    	from
    		wine.review R
    	inner join
    		wine.wine_log L
    	on
    		R.log_id = L.log_id
    	where
    		L.wine_id = #{wineId}
    		and
    		L.user_id = #{userId}
    	order by
    		L.date desc
    	limit
    		${(page - 1) * pageSize}, #{pageSize}
    </select>

</mapper>
